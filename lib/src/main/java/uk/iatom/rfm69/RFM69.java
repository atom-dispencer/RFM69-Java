/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.iatom.rfm69;

import java.util.Map;

import uk.iatom.rfm69.registers.SingleRegister;
import uk.iatom.rfm69.registers.values.BitRates;
import uk.iatom.rfm69.registers.values.DataModulations;
import uk.iatom.rfm69.registers.values.FifoThresh;
import uk.iatom.rfm69.registers.values.FrequencyDeviations;
import uk.iatom.rfm69.registers.values.OpModes;

public class RFM69 {

    private IPeripheral chip;

    private SingleRegister<FifoThresh> FIFO = new SingleRegister<>(FifoThresh::encode, FifoThresh::decode, chip, 0x00);
    
    private SingleRegister<OpModes> OPMODE = SingleRegister(XXX, YYY, 0x01);
    private SingleRegister<DataModulations> DATAMODUL = SingleRegister(XXX, YYY, 0x02);
    private CompoundRegister<BitRates.Msb> BITRATEMSB = CompoundRegister(XXX, YYY, 0x03);
    private CompoundRegister<BitRates.Lsb> BITRATELSB = CompoundRegister(XXX, YYY, 0x04);
    private SingleRegister<FrequencyDeviations.Msb> FDEVMSB = SingleRegister(XXX, YYY, 0x05);
    private SingleRegister<FrequencyDeviations.Lsb> FDEVLSB = SingleRegister(XXX, YYY, 0x06);
    private SingleRegister FRFMSB = Register(XXX, YYY, 0x07);
    private SingleRegister FRFMID = Register(XXX, YYY, 0x08);
    private SingleRegister FRFLSB = Register(XXX, YYY, 0x09);
    private SingleRegister OSC1 = Register(XXX, YYY, 0x0A);
    private SingleRegister AFCCTRL = Register(XXX, YYY, 0x0B);
    private SingleRegister LOWBAT = Register(XXX, YYY, 0x0C);
    private SingleRegister LISTEN1 = Register(XXX, YYY, 0x0D);
    private SingleRegister LISTEN2 = Register(XXX, YYY, 0x0E);
    private SingleRegister LISTEN3 = Register(XXX, YYY, 0x0F);
    private SingleRegister VERSION = Register(XXX, YYY, 0x10);
    private SingleRegister PALEVEL = Register(XXX, YYY, 0x11);
    private SingleRegister PARAMP = Register(XXX, YYY, 0x12);
    private SingleRegister OCP = Register(XXX, YYY, 0x13);
    private SingleRegister AGCREF = Register(XXX, YYY, 0x14); // not present on RFM69/SX1231
    private SingleRegister AGCTHRESH1 = Register(XXX, YYY, 0x15); // not present on RFM69/SX1231
    private SingleRegister AGCTHRESH2 = Register(XXX, YYY, 0x16); // not present on RFM69/SX1231
    private SingleRegister AGCTHRESH3 = Register(XXX, YYY, 0x17); // not present on RFM69/SX1231
    private SingleRegister LNA = Register(XXX, YYY, 0x18);
    private SingleRegister RXBW = Register(XXX, YYY, 0x19);
    private SingleRegister AFCBW = Register(XXX, YYY, 0x1A);
    private SingleRegister OOKPEAK = Register(XXX, YYY, 0x1B);
    private SingleRegister OOKAVG = Register(XXX, YYY, 0x1C);
    private SingleRegister OOKFIX = Register(XXX, YYY, 0x1D);
    private SingleRegister AFCFEI = Register(XXX, YYY, 0x1E);
    private SingleRegister AFCMSB = Register(XXX, YYY, 0x1F);
    private SingleRegister AFCLSB = Register(XXX, YYY, 0x20);
    private SingleRegister FEIMSB = Register(XXX, YYY, 0x21);
    private SingleRegister FEILSB = Register(XXX, YYY, 0x22);
    private SingleRegister RSSICONFIG = Register(XXX, YYY, 0x23);
    private SingleRegister RSSIVALUE = Register(XXX, YYY, 0x24);
    private SingleRegister DIOMAPPING1 = Register(XXX, YYY, 0x25);
    private SingleRegister DIOMAPPING2 = Register(XXX, YYY, 0x26);
    private SingleRegister IRQFLAGS1 = Register(XXX, YYY, 0x27);
    private SingleRegister IRQFLAGS2 = Register(XXX, YYY, 0x28);
    private SingleRegister RSSITHRESH = Register(XXX, YYY, 0x29);
    private SingleRegister RXTIMEOUT1 = Register(XXX, YYY, 0x2A);
    private SingleRegister RXTIMEOUT2 = Register(XXX, YYY, 0x2B);
    private SingleRegister PREAMBLEMSB = Register(XXX, YYY, 0x2C);
    private SingleRegister PREAMBLELSB = Register(XXX, YYY, 0x2D);
    private SingleRegister SYNCCONFIG = Register(XXX, YYY, 0x2E);
    private SingleRegister SYNCVALUE1 = Register(XXX, YYY, 0x2F);
    private SingleRegister SYNCVALUE2 = Register(XXX, YYY, 0x30);
    private SingleRegister SYNCVALUE3 = Register(XXX, YYY, 0x31);
    private SingleRegister SYNCVALUE4 = Register(XXX, YYY, 0x32);
    private SingleRegister SYNCVALUE5 = Register(XXX, YYY, 0x33);
    private SingleRegister SYNCVALUE6 = Register(XXX, YYY, 0x34);
    private SingleRegister SYNCVALUE7 = Register(XXX, YYY, 0x35);
    private SingleRegister SYNCVALUE8 = Register(XXX, YYY, 0x36);
    private SingleRegister PACKETCONFIG1 = Register(XXX, YYY, 0x37);
    private SingleRegister PAYLOADLENGTH = Register(XXX, YYY, 0x38);
    private SingleRegister NODEADRS = Register(XXX, YYY, 0x39);
    private SingleRegister BROADCASTADRS = Register(XXX, YYY, 0x3A);
    private SingleRegister AUTOMODES = Register(XXX, YYY, 0x3B);
    private SingleRegister FIFOTHRESH = Register(XXX, YYY, 0x3C);
    private SingleRegister PACKETCONFIG2 = Register(XXX, YYY, 0x3D);
    private SingleRegister AESKEY1 = Register(XXX, YYY, 0x3E);
    private SingleRegister AESKEY2 = Register(XXX, YYY, 0x3F);
    private SingleRegister AESKEY3 = Register(XXX, YYY, 0x40);
    private SingleRegister AESKEY4 = Register(XXX, YYY, 0x41);
    private SingleRegister AESKEY5 = Register(XXX, YYY, 0x42);
    private SingleRegister AESKEY6 = Register(XXX, YYY, 0x43);
    private SingleRegister AESKEY7 = Register(XXX, YYY, 0x44);
    private SingleRegister AESKEY8 = Register(XXX, YYY, 0x45);
    private SingleRegister AESKEY9 = Register(XXX, YYY, 0x46);
    private SingleRegister AESKEY10 = Register(XXX, YYY, 0x47);
    private SingleRegister AESKEY11 = Register(XXX, YYY, 0x48);
    private SingleRegister AESKEY12 = Register(XXX, YYY, 0x49);
    private SingleRegister AESKEY13 = Register(XXX, YYY, 0x4A);
    private SingleRegister AESKEY14 = Register(XXX, YYY, 0x4B);
    private SingleRegister AESKEY15 = Register(XXX, YYY, 0x4C);
    private SingleRegister AESKEY16 = Register(XXX, YYY, 0x4D);
    private SingleRegister TEMP1 = Register(XXX, YYY, 0x4E);
    private SingleRegister TEMP2 = Register(XXX, YYY, 0x4F);
    private SingleRegister TESTLNA = Register(XXX, YYY, 0x58);
    private SingleRegister TESTPA1 = Register(XXX, YYY, 0x5A); // only present on RFM69HW/SX1231H);
    private SingleRegister TESTPA2 = Register(XXX, YYY, 0x5C); // only present on RFM69HW/SX1231H);
    private SingleRegister TESTDAGC = Register(XXX, YYY, 0x6F);
}
